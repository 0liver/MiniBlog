<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>Mads Kristensen</author>
  <title>Principles of simplicity</title>
  <description>A list of 10 principles of simplicity</description>
  <content>&lt;p&gt;
As I&amp;rsquo;ve wrote before, simplicity is very subjective and is not considered a first class design principle as unit testing, design patterns, UML etc. However, it is in my opinion possible to use guidelines of simplicity in an objective manor and make simplicity a part of the coding standard in any company. As with many other design principles, it can only be reinforced using code reviews and that is exactly how we enforce it at &lt;a href="http://www.traceworks.com"&gt;Traceworks&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Here is a list of some of the principles of simplicity that we use. Some of them are borrowed from other principles or philosophies, but together they form a nice simplicity guideline I think. 
&lt;/p&gt;
&lt;h2&gt;1. Simplicity or not at all&lt;/h2&gt;
&lt;p&gt;
Some developers tend to over-complicate a task and ends up writing too many classes to solve a simple problem. The ability to take a step back and observe the problem space before digging in to a detail is hard, but it will keep you from over-complicating matters. The more experience a developer have, the easier it becomes to find out how many steps backwards to take in order to fully understand the problem space. 
&lt;/p&gt;
&lt;p&gt;
I&amp;rsquo;ve always believed that if you cannot find a simple solution then don&amp;rsquo;t do it at all. That&amp;rsquo;s because if you cannot take a step back and get a good feeling for the problem, then you don&amp;rsquo;t understand it enough to see a simple solution &amp;ndash; and trust me, there is always a simple solution. If you don&amp;rsquo;t understand the problem you are trying to solve, then you probably cannot solve it. &lt;a href="/post/Simplicity-or-not-at-all.aspx"&gt;More&lt;/a&gt; 
&lt;/p&gt;
&lt;h2&gt;2. Don&amp;rsquo;t build submarines&lt;/h2&gt;
&lt;p&gt;
It&amp;rsquo;s a common fact that IT projects take longer than scheduled even if you schedule for delays. Books have been written on this fact, but it also has an impact on the simplicity of the code written. 
&lt;/p&gt;
&lt;p&gt;
If you design a huge project with many components, tiers, whistles and bells then you most likely will be delayed. In the eleventh hour up to a deadline, you will probable not have time for proper testing and code reviews. The problem is that you might never get back to that code before it breaks 6 months later. Maybe it&amp;rsquo;s your co-worker who will fix the problem, but end up looking frustrated at a complex submarine not knowing where to begin. 
&lt;/p&gt;
&lt;p&gt;
If possible, make sure that you design the project in modules that can be added after the release of the core product. This can be done in web projects easily, but prove very difficult for desktop applications. 
&lt;/p&gt;
&lt;h2&gt;3. Test when appropriate&lt;/h2&gt;
&lt;p&gt;
Testing is one very important factor of the development cycle and there are many different tests to perform. Unit testing, use case testing, performance testing etc. Tests are good, but if you test everything to the smallest detail every time, then you probably waste a lot of time on it. Test where it makes sense and use different combinations of the various tests for different libraries. Not all code needs unit testing and not all code needs performance testing, but they need some tests. Be smart and don&amp;rsquo;t spend more time writing test cases than you do on writing or designing your application unless it&amp;rsquo;s your job. Read more at &lt;a href="/post.aspx?id=85a86dd4-ce45-4b9e-8c7f-07937ca54a2b"&gt;Testing your code&lt;/a&gt;. 
&lt;/p&gt;
&lt;h2&gt;4. Be precise when naming methods&lt;/h2&gt;
&lt;p&gt;
A method must have a name that tells exactly what it does. Luckily, a method should at all time only do one thing to be simple, so this is easy. A method called Send could be a bad name if it actually creates a mail object and fill out the sender, body and subject and then passes it on to another method that actually executes it. A more precise name would be CreateMailMessage. 
&lt;/p&gt;
&lt;p&gt;
When the method names become precise it also becomes very simple to understand exactly what is going on where. 
&lt;/p&gt;
&lt;h2&gt;5. Comment your code the simple way&lt;/h2&gt;
&lt;p&gt;
Code commenting can be done in a myriad of ways, but there really is only one that keeps your code simple at the same time. 
&lt;/p&gt;
&lt;p&gt;
Don&amp;rsquo;t comment the individual code lines in a method or property, but keep the comments above the class, method, property or interface. The comment should answer the questions &lt;a href="/post.aspx?id=2887fd12-bb4e-4ab8-b55c-908ab8e29bee"&gt;what, why and how&lt;/a&gt;. This can be done quite easy when you have giving the method a precise name and you can spend more time explaining the &lt;em&gt;why&lt;/em&gt; than the &lt;em&gt;what&lt;/em&gt; because the name tells what it does. 
&lt;/p&gt;
&lt;p&gt;
This wouldn&amp;rsquo;t be a rule if there aren&amp;rsquo;t any exceptions, so of course there is - one to be precise. If your code contains a strange quirk to work, then you should write a note above that piece explaining why it is done that way. 
&lt;/p&gt;
&lt;p&gt;
Clear comments also tell others what your code does and are therefore a good method to make your code simpler to understand. 
&lt;/p&gt;
&lt;h2&gt;6. &lt;strike&gt;Steal&lt;/strike&gt; borrow and simplify&lt;/h2&gt;
&lt;p&gt;
We all use code pieces found on the Internet all the time. Search Driven Development is the new developer philosophy, but be careful about the code found on the web. It might work, do the job and get you over the finish line, but it might not be the easiest code to understand. If you don&amp;rsquo;t understand it when you paste it into your code file, then you probably don&amp;rsquo;t understand why it breaks 6 months later and then what do you do? 
&lt;/p&gt;
&lt;p&gt;
Make sure to clean up the code you find on the web and simplify it as much as possible. Don&amp;rsquo;t wait to do it, because then you probably forgot exactly what it does and how. Do it right away. 
&lt;/p&gt;
&lt;h2&gt;7. It&amp;rsquo;s not a question of fewer code lines&lt;/h2&gt;
&lt;p&gt;
I get this a lot. Apparently it is a common misunderstanding that simplicity is a question of writing fewer lines of code. That is not the case. Simplicity is about removing everything that can complicate the process of writing and maintaining software. 
&lt;/p&gt;
&lt;h2&gt;8. Don&amp;rsquo;t be a rock star&lt;/h2&gt;
&lt;p&gt;
Know your limitations and don&amp;rsquo;t be afraid to ask for help to solve a problem. If you continue in the wrong direction because your rock star mentality doesn&amp;rsquo;t allow you to ask for help, the code you write will end in a mess. If you can&amp;rsquo;t get your head around the problem, then you should ask for help. Otherwise you are clearly not the right person to solve it. 
&lt;/p&gt;
&lt;p&gt;
By asking others for help, you might just learn something. 
&lt;/p&gt;
&lt;h2&gt;9. Learn much about much&lt;/h2&gt;
&lt;p&gt;
To be able to find the simple solution to any problem, you need diversity. The ability to see a problem from multiple angles is a powerful tool in problem solving but it requires that you have a lot of angles to use. 
&lt;/p&gt;
&lt;p&gt;
Read books, play with new tools, languages and technologies. The more you know about different approaches to a certain problem, chances are you find the right solution a lot earlier. 
&lt;/p&gt;
&lt;h2&gt;10. Don&amp;rsquo;t trust your simplicity instinct&lt;/h2&gt;
&lt;p&gt;
This might be the single most important rule of simplicity. The only person who can tell if your code is simple is anyone but yourself. A code review is the best way of finding out and at Traceworks, it is always the reviewer who decides whether or not the code is simple enough and if the comments are sufficient. 
&lt;/p&gt;
&lt;p&gt;
Over time we have all learned what gets you through a code review and therefore have begun to write simple the first time. Learning by doing. 
&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
Simplicity is an implementation philosophy and it&amp;rsquo;s a very important one. The list of 10 points are guidelines and there are many more, but then you&amp;rsquo;d probably fall a sleep reading them all. Congrats for coming all the way down to the conclusion btw. If you have read it all, then you probably find it interesting either because you agree or disagree. Either way, simplicity is the most important factor in my work and it has prevented many headaches in the past. 
&lt;/p&gt;
</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2007-07-24 00:03:00</pubDate>
  <lastModified>2007-07-24 08:44:52</lastModified>
  <raters>15</raters>
  <rating>4.6</rating>
  <slug>Principles of simplicity</slug>
  <tags>
    <tag>simplicity</tag>
    <tag>commenting</tag>
    <tag>testing</tag>
  </tags>
  <comments>
    <comment id="296582e1-e41d-4238-9ab7-1c0838838f68" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2007-07-24 08:50:56</date>
      <author>Korayem</author>
      <email>korayem@hasdot.com</email>
      <country>eg</country>
      <ip>195.212.29.92</ip>
      <website>http://korayem.net/</website>
      <content>Excellent list of Guidelines. I loved it.

Now spread the love:
http://digg.com/programming/10_Programming_Principles_of_Simplicity</content>
    </comment>
    <comment id="ecd399e4-a18e-4089-97f6-f7ca1aab7036" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2007-07-24 14:02:51</date>
      <author>DotNetKicks.com</author>
      <email>trackback</email>
      <country />
      <ip>209.200.85.7</ip>
      <website>http://www.dotnetkicks.com/other/Principles_of_simplicity</website>
      <content>Trackback from DotNetKicks.com

Principles of simplicity</content>
    </comment>
    <comment id="3e1718e0-a905-4396-b8e4-9c30e482e742" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2007-07-24 21:44:08</date>
      <author>Denny Ferrassoli</author>
      <email>d@dennydotnet.com</email>
      <country>us</country>
      <ip>68.166.128.202</ip>
      <website>http://www.dennydotnet.com/</website>
      <content>Thanks Mads,

I was working on an ASP.NET AJAX control today and ended up taking it way too far. I rememebered reading your blog yesterday and saved myself a good few hours of useless programming. I trimmed the control and it now works as I wanted without the complexity. Thanks for the reminder on simplicity, it will be taken into account in the future as well.</content>
    </comment>
    <comment id="617681b6-9892-4600-bd5a-54eed196e12b" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2007-07-25 19:05:14</date>
      <author>seregaborzov.wordpress.com</author>
      <email>pingback</email>
      <country />
      <ip>72.232.151.20</ip>
      <website>http://seregaborzov.wordpress.com/2007/07/25/sdelai-code-prosche/</website>
      <content>Pingback from seregaborzov.wordpress.com

Ð¡Ð´ÐµÐ»Ð°Ð¹ ÐºÐ¾Ð´ Ð¿Ñ€Ð¾Ñ‰Ðµ&amp;#8230; &amp;laquo; Ð‘Ð»Ð¾Ð³ Ð¡ÐµÑ€Ñ‘Ð¶Ð¸ Ð‘Ð¾Ñ€Ð·Ð¾Ð²Ð°</content>
    </comment>
    <comment id="22e16030-5d50-4482-b296-4bc316deb2ce" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2007-07-25 21:43:18</date>
      <author>Charlene</author>
      <email>cwroblew@webwisewardens.com</email>
      <country>us</country>
      <ip>68.115.23.221</ip>
      <website>http://webwisewardens.com/</website>
      <content>I know this is a top ten list, but there really are two more.

11. Try not to repeat yourself.
12. Keep code sections (ie loops, calculations, etc.) short.</content>
    </comment>
    <comment id="c2492dbc-6652-45d3-9aaa-909b23cd0e53" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2007-07-27 14:07:41</date>
      <author>blog.olivier-duval.info</author>
      <email>pingback</email>
      <country />
      <ip>81.64.224.67</ip>
      <website>http://blog.olivier-duval.info/articles/2007/07/27/net-en-vrac</website>
      <content>Pingback from blog.olivier-duval.info

Zork[Yy]'s log</content>
    </comment>
    <comment id="bed86395-875a-40dd-aa47-822ae8f33c1e" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2007-08-20 15:54:18</date>
      <author>blog.sqlauthority.com</author>
      <email>pingback</email>
      <country />
      <ip>72.232.151.3</ip>
      <website>http://blog.sqlauthority.com/2007/08/20/sqlauthority-news-principles-of-simplicity/</website>
      <content>Pingback from blog.sqlauthority.com

SQLAuthority News - Principles of Simplicity &amp;laquo; Journey to SQL Authority with Pinal Dave</content>
    </comment>
    <comment id="7df40205-5a03-4d18-8e4a-5df903682f7d" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2009-01-10 23:45:24</date>
      <author>electric guitars uk</author>
      <email>ukguitars@gmail.com</email>
      <country>us</country>
      <ip>124.13.107.97</ip>
      <website>http://astore.amazon.co.uk/elecguitblog-21</website>
      <content>Your guide is very helpful.</content>
    </comment>
    <comment id="ac55415d-dfb5-4d8c-9ec4-be6a82833234" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2013-03-13 09:53:36</date>
      <author>iandiandi.com</author>
      <email>pingback</email>
      <country />
      <ip>210.157.22.18</ip>
      <website>http://www.iandiandi.com/articles/?p=74</website>
      <moderatedby>Rule:white list</moderatedby>
      <content>Pingback from iandiandi.com

NPO支援のためのWEBボランティアグループ - i &amp;amp; i &amp;amp; i | ブログ</content>
    </comment>
  </comments>
  <categories>
    <category>6c818960-4974-4483-ba3e-0a82c4a7ec99</category>
  </categories>
  <notifications />
</post>